#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

function usage() {
    cat << EOF
NAME
        Decode DMCE trace buffer

SYNOPSIS
        dmce-trace-view [data file] [probe file] [code tree path]

OPTIONS

PREREQUISITE
        Setup dmce for trace, run dmce on a git, build any executable and run it.

DESCRIPTION
        Provides an enahnced, more feature-rich trace view than the output of dmce-trace.

        It's possible to force the viewer to 'tgui', 'fzf', 'less', 'stdout', 'stderr' or '<file>'. See EXAMPLES below!

        Note! To be able to use 'fzf' it has to be installed (=github.com/junegunn/fzf).

CONFIGURATION
        # select trace viewer tool (if not set, default to tgui)
        export DMCE_TRACE_VIEWER tgui|stdout|stderr|less|fzf|<file>

EXAMPLES
        # install fzf
        $ <package manager> install fzf

        # decode the trace buffer and launch an interactive gui (defaults to tgui)
        $ dmce-trace-viewer [data file] [probe file] [code tree path]

        # decode the trace buffer and display the trace on stdout
        $ DMCE_TRACE_VIEWER=stdout dmce-trace-viewer [data file] [probe file] [code tree path]

        # decode the trace buffer and save the trace to a file '/tmp/a.trace'
        $ DMCE_TRACE_VIEWER=/tmp/a.trace dmce-trace-viewer [data file] [probe file] [code tree path]

        # Typical example including paths to default file locations using a __non-probed__ tree
        $ cd mygit
        $ dmce-trace-viewer /tmp/$USER/dmce/dmcebuffer.bin /tmp/$USER/dmce/mygit/probe-references-original.log $(pwd)

        # Typical example including paths to default file locations using a __non-probed__ tree using 'fzf'
        $ cd mygit
        $ DMCE_TRACE_VIEWER=fzf dmce-trace-viewer /tmp/$USER/dmce/dmcebuffer.bin /tmp/$USER/dmce/mygit/probe-references-original.log $(pwd)

        # Typical example including paths to standard file locations using a __probed__ tree using less
        $ cd mygit
        $ DMCE_TRACE_VIEWER=less dmce-trace-viewer /tmp/$USER/dmce/dmcebuffer.bin /tmp/$USER/dmce/mygit/probe-references.log $(pwd)
EOF
    exit 1
}

function init() {

    # usage and sanity checks
    if [ $# -ne 3 ]; then
        usage
    fi
    data=$1
    probes=$2
    git_full=$3
    git=$(basename $git_full)
    WORKAREA="/tmp/$USER"
    mkdir -p $WORKAREA

# TODO: remove or check comma-separated list
#    if [ ! -d "${git_full}" ]; then
#        echo "error: ${git_full} is not a directory"
#        usage
#    fi
}

function cleanup() {
    for f in $files; do
        if [ -e "$f" ]; then
            rm "$f"
        fi
    done
}

function main() {
    init "$@"

    trap cleanup EXIT

    dmce_trace_log="$WORKAREA/dmce-trace-$git.log"
    dmce_trace_args=
    fzf=0
    fzf_cmd="fzf"
    # not set, select tgui
    if [ "x$DMCE_TRACE_VIEWER" = "x" ]; then
        DMCE_TRACE_VIEWER="tgui"
    elif [ "x$DMCE_TRACE_VIEWER" = "xfzf" ]; then
        # if fzf is forced but not available, fallback to 'less'
        if command -v fzf-next-selected > /dev/null; then
            fzf=1
            fzf_cmd="fzf-next-selected --multi --bind=ctrl-j:next-selected"
        elif command -v fzf > /dev/null; then
            fzf=1
            fzf_cmd="fzf"
        else
            fzf=0
        fi
    else
        # fzf is 0, select less/stdout/stderr/file below
        :
    fi

    dmce_trace_args+=" --delimiter @"
    if [ $fzf -eq 1 ]; then
        dmce_trace_args+=" --format raw"
        dmce_trace_args+=" --numvars 5"
    fi
    dmce_trace_args+=" -t --verbose"
    dmce_trace_args+=" $data"
    dmce_trace_args+=" $probes"
    dmce_trace_args+=" ${git_full}"

    echo "$ dmce-trace ${dmce_trace_args}"
    if ! dmce-trace ${dmce_trace_args} > ${dmce_trace_log}; then
        echo "error: 'dmce-trace ${dmce_trace_args}' failed"
        exit 1
    fi

    # sanity check
    if [ ! -s ${dmce_trace_log} ]; then
        echo "error: dmce-trace was successful but we got no output"
        exit 1
    fi
    files+=" ${dmce_trace_log}"

    # TODO: Remove or make work with comma-separated list
#    echo "$ cd ${git_full}"
#    if ! cd "${git_full}"; then
#        echo "error: 'cd ${git_full}' failed, weird!"
#        exit 1
#    fi

    # none-fzf: simply display the log
    if [ $fzf -eq 0 ]; then
        if [ "x$DMCE_TRACE_VIEWER" = "x" ] || [ "x$DMCE_TRACE_VIEWER" = "xstdout" ]; then
            column -t -s'@' ${dmce_trace_log}
        elif [ "x$DMCE_TRACE_VIEWER" = "xless" ]; then
            column -t -s'@' ${dmce_trace_log} | less -r
        elif [ "x$DMCE_TRACE_VIEWER" = "xstderr" ]; then
            column -t -s'@' ${dmce_trace_log} 1>&2
        elif [ "x$DMCE_TRACE_VIEWER" = "xtgui" ]; then
            cp ${dmce_trace_log} /tmp/patrik.trace
            dmce-trace-tgui ${dmce_trace_log}
        else
            echo "saving trace as '$(readlink -f $DMCE_TRACE_VIEWER)'"
            if ! column -t -s'@' ${dmce_trace_log} > $DMCE_TRACE_VIEWER; then
                exit 1
            fi
        fi

        exit 0
    fi

    exit 0
    # fzf only below...
    column -t -s@ <${dmce_trace_log} > ${dmce_trace_log}_view
    files+=" ${dmce_trace_log}_view"
    t_old="$WORKAREA/res-$git.told"
    true > "${t_old}"
    files+=" ${t_old}"
    preview_left="${WORKAREA}/res-$git.left"
    preview_right="${WORKAREA}/res-$git.right"
    files+=" $preview_left"
    files+=" $preview_right"
    < ${dmce_trace_log}_view $fzf_cmd \
        --tac \
        --preview-window=down \
        --preview '
        lineno={n}
        ((lineno++))
        # get core
        c=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f1)

        # timestamp
        t=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f2)

        if [ -s '${t_old}' ]; then
            t_old=$(cat '${t_old}');
            if [ $t -ge $t_old ]; then
                t_diff="$((t-t_old)) ns"
            else
                t_diff="$((t_old-t)) ns"
            fi
        else
            t_old=0
            t_diff=0
        fi
        # save old t value
        echo "$t" > '${t_old}';

        # get filename
        f=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f3)

        # get line number
        n=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f4 | cut -b2-)

        # get func name
        func=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f5 | xargs)

        # get variables
        vars=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f7)

        # display filename, line, core and diff at the top
        echo "$lineno $f +$n core: $c diff: $t_diff"

        # delimiter
        echo "---"

        # number of lines
        f_len=$(wc -l < $f)

        # the whole file fit in the preview window?
        if [ $f_len -lt $FZF_PREVIEW_LINES ]; then
            p_lines=$((FZF_PREVIEW_LINES))
        # is current line above halv preview?
        elif [ $n -lt $((FZF_PREVIEW_LINES/2)) ]; then
            p_lines=$((FZF_PREVIEW_LINES))
        else
            p_lines=$((FZF_PREVIEW_LINES/2))
        fi

        # default grep colors
        if [ ! -v GREP_COLORS ]; then
            export GREP_COLORS="ms=38;5;0;48;5;14"
        fi

        # get the whole file with line numbers
        # highlight our line
        grep -n ".*" $f | grep -C$p_lines "^$n:.*" | grep -C$p_lines --color=always -E "^$n:.*" > '${preview_left}'

        # sort the variables and do some pretty printing
        printf "%s\n" $vars | sort | column -t -s: | sed -e "s,^,  ,g" > '${preview_right}'

        # calclulate the length of the two files
        left_len=$(wc -l < '${preview_left}')
        right_len=$(wc -l < '${preview_right}')

        # use pr to produce some nice columns
        pr -w $FZF_PREVIEW_COLUMNS -e -t -m <(head -$right_len '${preview_left}') <(head -$right_len '${preview_right}')

        # display the remaining part of the file
        tail -n +$((right_len+1)) '${preview_left}'' \
            --bind 'enter:execute(     lineno={n}; ((lineno++)); < /dev/tty eval $(f=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f3); n=$(sed "${lineno}!d" '${dmce_trace_log}' | cut -d@ -f4); echo "vim $f $n"))'

    exit 0
}

main "$@"
