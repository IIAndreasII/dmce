#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

function usage() {
	local projs

	projs="${OVE_PROJECT_LIST}"
	cat << EOF
NAME
	Insert DMCE probes into one or multiple OVE projects/repos

SYNOPSIS
	ove dmce trace-prepare proj...

OPTIONS
	proj:
	  choose from: ${projs}

DESCRIPTION
	This plugin is a helper that will insert probes into one or multiple git repo(s). As OVE
	know (usually) how to build the project 'proj' this plugin will also build the code.

	Use 'ove dmce trace-decode' to decode the trace buffer.

CONFIGURATION
	DMCE_TRACE_REPO_PATTERN
		what repos to instrument

	DMCE_TRACE_STEPS
		what steps to perform

		available	setup profile dmce build install buildme restore
		default		setup profile dmce buildme restore

EXAMPLES
	# prepare the project (insert DMCE probes) and build it
	ove dmce trace-prepare ag

	# run some test, here we're searching for the word 'foobar'
	ag foobar

	# decode the trace buffer and launch a trace viewer
	ove dmce trace-decode ag

	# monorepo oneliner (the above three commands in one go)
	ove dmce trace-prepare ag && { ag foobar; ove dmce trace-decode ag; }

	# multirepo oneliner
	ove dmce trace-prepare tmux && { tmux ls; ove dmce trace-decode tmux; }
EOF
}

function _echo() {
	echo "trace-prepare: $*"
}

function main() {
	local err
	declare -A repo_hash
	local offset
	local p
	local projs
	local re
	local repo
	local repo_list
	local repo_short
	local _start

	# usage and sanity checks
	if [ $# -eq 0 ]; then
		usage
		exit 1
	fi

	if [ "${DMCE_TRACE_STEPS}" = "" ]; then
		steps="profile dmce buildme restore"
	else
		steps="${DMCE_TRACE_STEPS}"
	fi

	err=0
	projs="$*"
	offset=0

	re=\\bsetup\\b
	if [[ ${steps} =~ $re ]]; then
		# start with a clean DMCE config
		if ! dmce-setup "${OVE_BASE_DIR:?}"; then
			exit 1
		fi
	fi

	re=\\bdmce\\b
	if [[ ${steps} =~ $re ]]; then
		if command -v python &> /dev/null; then
			_start=$(date '+%s.%N')
		else
			_start=$SECONDS
		fi

		# for each project and all dependencies
		for p in $projs $(ove-list-deps "${projs}"); do
			# get path(s) involved for this project/dependency
			for repo in $(ove-proj2val "$p" path); do
				if [ "${OVE_BASE_DIR}" = "${repo}" ]; then
					# skip base dir
					continue
				elif [ ! -d "${repo}" ]; then
					continue
				elif ! repo=$(GIT_CEILING_DIRECTORIES="${OVE_BASE_DIR}" git \
					-C "${repo}" \
					rev-parse \
					--show-toplevel 2> /dev/null); then
					continue
				fi

				_echo "project: $p"
				_echo "path: $repo"
				repo_short="${repo/${OVE_BASE_DIR}\/}"
				if [ "$repo_short" = "dmce" ]; then
					# skip self
					continue
				fi
				repo_list+=" ${repo_short}"

				if [ "$DMCE_TRACE_REPO_PATTERN" != "" ]; then
					re=${DMCE_TRACE_REPO_PATTERN}
					if [[ ! ${repo_short} =~ $re ]]; then
						continue
					fi
				fi

				# already instrumented?
				if test "${repo_hash["${repo}"]+isset}"; then
					continue
				fi

				# run DMCE
				if ! dmce_one_repo "${repo}" "${p}" "$offset"; then
					err=$((err + 1))
					continue
				fi

				n=$(git -C "$repo" grep 'DMCE_NBR_OF_PROBES ('| cut -d: -f2 | sort -u | wc -l)
				# assert
				if [ "$n" -ne 1 ]; then
					echo "error: more than one DMCE_NBR_OF_PROBES in '${repo_short}'"
					exit 1
				fi

				# get offset
				offset=$((offset + $(git -C "$repo" grep 'DMCE_NBR_OF_PROBES (' | \
					cut -d: -f2 | \
					sort -u | \
					grep -o '[0-9]\+')))

				repo_hash["${repo}"]=1

				re=\\bsetup\\b
				if [[ ${steps} =~ $re ]]; then
					# clean up DMCE config files
					if ! dmce-setup "${OVE_BASE_DIR:?}"; then
						exit 1
					fi
				fi
			done
		done

		if [ $err -ge ${#repo_hash[*]} ]; then
			exit 1
		fi

		if command -v python &> /dev/null; then
			diff="$(python -c "print('{:.1f}'.format($(date '+%s.%N')-$_start))")"
			dpps="$(python -c "print('{:.1f}'.format($offset/$diff))")"
		else
			diff="$((SECONDS - _start))"
			dpps="$((offset / diff))"
		fi

		str="${#repo_hash[*]} repo"
		if [ ${#repo_hash[*]} -gt 1 ]; then
			str+="s"
		fi

		_echo "${str}, $offset probes, $diff seconds, $dpps dpps"
	fi

	re=\\bbuildme\\b
	if [[ ${steps} =~ $re ]]; then
		if ! build_multiple_proj "$projs"; then
			exit 1
		fi
	elif ! re=\\bbuild\|install\\b; then
		exit 1
	elif [[ ${steps} =~ $re ]]; then
		# build but we have more than one repo
		if [ ${#repo_hash[*]} -gt 1 ]; then
			if ! build_multiple_proj "$projs"; then
				exit 1
			fi
		else
			if ! build_one_proj "$projs"; then
				exit 1
			fi
		fi
	fi

	re=\\brestore\\b
	if [[ ${steps} =~ $re ]]; then
		# restore source tree
		for repo in ${!repo_hash[*]}; do
			_echo "ove-dmce launch -c -q -- $repo"
			ove-dmce launch -c -q -- "$repo"
		done
	fi

	# remember all dmcebuffer.bin files
	if [ -d /tmp/"${OVE_USER}"/dmce ]; then
		find /tmp/"${OVE_USER}"/dmce -maxdepth 1 -name 'dmcebuffer.bin*' | \
			grep '[0-9]$' | \
			LC_ALL=C sort > /tmp/"${OVE_USER}"/dmce/dmce-trace-prepare.pre
	fi

	# remove any already existing trace lock file at dmce-configure-local default path
	if [ -e /tmp/"${OVE_USER}"/dmce-trace-buffer-lock ]; then
		rm -rf /tmp/"${OVE_USER}"/dmce-trace-buffer-lock
	fi

	exit 0
}

# $1: repo
# $2: project
# $3: offset
function dmce_one_repo {
	local args
	local default_args
	local git_full
	local offset
	local profile
	local profile_db
	local re

	git_full="$1"
	proj="$2"
	offset="$3"

	if ! cd "${git_full}"; then
		return 1
	fi

	re=\\bprofile\\b
	if [[ ${steps} =~ $re ]]; then
		# any OWEL specific arguments to set-profile?
		profile_db="${OVE_OWEL_DIR}/projects/dmce/profile.db"
		if [ ! -s "${profile_db}" ]; then
			args="-C 1 trace"
			_echo "profile.db not found, using '$args' as profile"
		else
			_echo "profile.db: $profile_db"
			# read default trace profile and args
			if grep -q "^default:trace" "${profile_db}"; then
				default_args=$(grep "^default:trace:" "${profile_db}" | cut -d: -f3-)
			fi

			# no profile for this repo?
			if ! grep -q "^$proj:trace:" "${profile_db}"; then
				args="$default_args"
				_echo "no profile found for $proj"
			else
				args=$(grep "^$proj:trace:" "${profile_db}" | cut -d: -f3-)
				if [ "$args" = "default" ]; then
					args="$default_args"
					_echo "using default profile for $proj"
				fi

				profile=${args##* }
				# make sure that we have selected a proper profile
				profiles="$(dmce-set-profile -l)"
				re=\\b$profile\\b
				if [[ ! "${profiles}" =~ ${re} ]]; then
					echo "error: wrong profile '$profile' - available: $profiles"
					return 1
				fi
			fi
		fi

		if [ "${args}" != "" ]; then
			_echo "ove-dmce set-profile $args"
			# shellcheck disable=SC2086
			if ! ove-dmce set-profile $args; then
				return 1
			fi
		fi
	fi

	_echo "ove-dmce launch --ast-cache -a --offset=$offset -q -- $git_full"
	if ! ove-dmce launch --ast-cache -a --offset="$offset" -q -- "$git_full"; then
		return 1
	fi
}

function build_multiple_proj {
	local ove_proj

	ove_proj=$1

	echo "$ ove buildme-parallel ${ove_proj}"
	# shellcheck disable=SC2086
	if ! ove buildme-parallel ${ove_proj}; then
		return 1
	fi
}

function build_one_proj {
	local ove_proj

	ove_proj=$1

	re=\\bbuild\\b
	if [[ ${steps} =~ $re ]]; then
		echo "$ ove build ${ove_proj}"
		if ! ove build "${ove_proj}"; then
			return 1
		fi
	fi

	re=\\binstall\\b
	if [[ ${steps} =~ $re ]]; then
		echo "$ ove install ${ove_proj}"
		if ! ove install "${ove_proj}"; then
			return 1
		fi
	fi
}

main "$@"
