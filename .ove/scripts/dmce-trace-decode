#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
#
# MIT License
#
# Copyright (c) 2021 Ericsson
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice (including the next
# paragraph) shall be included in all copies or substantial portions of the
# Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
# OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
# OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

function usage() {
	cat << EOF
NAME
	Decode DMCE trace buffer

SYNOPSIS
	ove dmce trace-decode proj

OPTIONS
	proj: OVE project

PREREQUISITE
	A successful run of 'ove dmce trace-prepare'

DESCRIPTION
	This OVE plugin will decode one DMCE trace buffer and display the raw trace to the user.

	It's possible to force the viewer to 'tgui', 'fzf', 'less', 'stdout', 'stderr' or '<file>'. See EXAMPLES below!

CONFIGURATION
	DMCE_TRACE_VIEWER tgui|stdout|stderr|less|fzf|<file>
		select trace viewer tool

	DMCE_TRACE_REPO_PATTERN
		what repos to decode

	DMCE_TRACE_INFO_PATTERN_INCLUDE
		include traces that match this pattern in the trace info file

	DMCE_TRACE_INFO_PATTERN_EXCLUDE
		exclude traces that match this pattern in the trace info file

EXAMPLES
	# decode the trace buffer and launch the interactive viewer tgui
	ove dmce trace-decode ag

	# decode the trace buffer and launch an interactive fzf viewer
	DMCE_TRACE_VIEWER=fzf ove dmce trace-decode ag

	# decode the trace buffer and display the trace on stdout
	DMCE_TRACE_VIEWER=stdout ove dmce trace-decode ag

	# decode the trace buffer and save the trace to a file '/tmp/a.trace'
	DMCE_TRACE_VIEWER=/tmp/a.trace ove dmce trace-decode ag

	# decode a multi-repo project
	ove dmce trace-decode tmux
EOF
	exit 1
}

function main() {
	local b
	local repos
	local probe_refs

	if [ $# -ne 1 ]; then
		usage
		exit 1
	fi
	proj="$1"

	if [ ! -d "/tmp/$OVE_USER/dmce" ]; then
		echo "error: no '/tmp/$OVE_USER/dmce' directory"
		usage
		exit 1
	fi

	find "/tmp/$OVE_USER/dmce" -maxdepth 1 -name 'dmcebuffer.bin*' | \
		grep "[0-9]$" | \
		LC_ALL=C sort > "/tmp/$OVE_USER/dmce/dmce-trace-prepare.post"
	if [ ! -s "/tmp/$OVE_USER/dmce/dmce-trace-prepare.post" ]; then
		echo "error: no dmcebuffer files found"
		usage
		exit 1
	fi

	# here we had some old dmcebuffers laying around, just take the new ones
	if [ ! -s "/tmp/$OVE_USER/dmce/dmce-trace-prepare.pre" ]; then
		b_list="$(cat "/tmp/$OVE_USER/dmce/dmce-trace-prepare.post")"
	elif ! b_list="$(LC_ALL=C comm -1 -3 "/tmp/$OVE_USER/dmce/dmce-trace-prepare.pre" "/tmp/$OVE_USER/dmce/dmce-trace-prepare.post")"; then
		exit 1
	fi

	if [ "$b_list" = "" ]; then
		echo "trace-decode: no traces found"
		usage
		exit 1
	fi

	# go through each trace
	for b in $b_list; do
		if [ ! -s "$b.info" ]; then
			echo "error: no '$b.info' file"
			continue
		fi

		if [ "$DMCE_TRACE_INFO_PATTERN_INCLUDE" != "" ]; then
			if ! grep -q "$DMCE_TRACE_INFO_PATTERN_INCLUDE" "$b.info"; then
				echo "trace-decode: skip $b as it does not match '$DMCE_TRACE_INFO_PATTERN_INCLUDE'"
				continue
			fi
		fi

		if [ "$DMCE_TRACE_INFO_PATTERN_EXCLUDE" != "" ]; then
			if grep -q "$DMCE_TRACE_INFO_PATTERN_EXCLUDE" "$b.info"; then
				echo "trace-decode: skip $b as it match '$DMCE_TRACE_INFO_PATTERN_EXCLUDE'"
				continue
			fi
		fi

		echo "trace-decode: proj: $proj buffer: $b"

		repos=
		probe_refs=
		for d in $(ove list-path "$proj"); do
			if [ ! -d "${d}" ]; then
				continue
			elif ! d=$(GIT_CEILING_DIRECTORIES="${OVE_BASE_DIR}" git \
				-C "${d}" \
				rev-parse \
				--show-toplevel); then
				continue
			fi

			if [ "$DMCE_TRACE_REPO_PATTERN" != "" ]; then
				re=${DMCE_TRACE_REPO_PATTERN}
				if [[ ! ${d/${OVE_BASE_DIR}/} =~ $re ]]; then
					continue
				fi
			fi

			ref_f="/tmp/$OVE_USER/dmce/${d/${OVE_BASE_DIR}\/}/probe-references"
			# detect if tree is probed or not
			if [ ! -e "$d"/.dmce_state_probed ]; then
				ref_f+="-original"
			fi
			ref_f+=".log"

			# sanity check
			if [ ! -s "${ref_f}" ]; then
				echo "trace-decode: ${ref_f} missing, skip ${d}"
				continue
			fi
			repos+="$d,"
			probe_refs+="${ref_f},"
		done

		if [ "$repos" = "" ]; then
			echo "trace-decode: no repos/probe refs found, skip ${d}"
			continue
		fi

		repos=${repos:0:-1}
		probe_refs=${probe_refs:0:-1}

		# launch trace viewer
		if [ -z "$TMUX" ]; then
			dmce-trace-viewer "$b" "$probe_refs" "$repos"
		else
			ove-run 1 "dmce-trace-viewer $b $probe_refs $repos"
		fi
	done
}

main "$@"
