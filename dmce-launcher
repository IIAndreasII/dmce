#!/bin/bash

# Copyright (c) 2016 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

NAME=$(basename $0)

function usage() {
	cat << EOF
SYNOPSIS
	$NAME [options]

OPTIONS
	-n val           Number of commits from HEAD

	-r val           SHA-1 delta HEAD..<val>

	--head[=]<val>	 <val> is the HEAD to which comparison is done

	-d val           Number of weeks from HEAD

	-c               Restore source code state

	--offset[=]<val> Assign probes starting from <val>

	--skip           Skip include file retrieval

	--stupid         DMCE include files awareness disabled

	-h, --help       This help

	-v, --version    Get DMCE version

DESCRIPTION:
	$NAME is the main entry point for running DMCE from a git.

	To be executed from within the git repo root:

	$ cd /path/to/git/
	$ ../dmce/$NAME ...

	Details? Check out README.md!

EXAMPLES:
	# Run DMCE on your latest changes
	$ ../dmce/$NAME

	# Run DMCE on the last 15 commits
	$ ../dmce/$NAME -n 15

	# Run DMCE on HEAD..SHA-1
	$ ../dmce/$NAME -r SHA-1

	# Run DMCE on $SHA1..SHA-2
	$ ../dmce/$NAME -r SHA-2 --head=SHA1

	# Run DMCE on last 10 weeks
	$ ../dmce/$NAME -d 10

	# Run DMCE on the last 100 commits. Start assigning probe numbers from 254.
	$ ../dmce/$NAME -n 100 --offset 254

	# Iterativly run DMCE on your latest changes
	$ ../dmce/$NAME
	$ make
	$ make test 2> outstderr.log
	$ ../dmce/dmce-summary outstderr.log
	$ ../dmce/$NAME -c

	# Run DMCE and use include files from previous run (faster)
	$ ../dmce/$NAME --skip

	# Handle include file retrieval externally
	$ ../dmce/$NAME --stupid

EOF
	exit 1
}

optspec+="c"
optspec+="d:"
optspec+="h"
optspec+="n:"
optspec+="r:"
optspec+="v"
optspec+="-:"

search_method=commits
new="HEAD"
old=
offset=0
number_of_commits=1
skip=false
stupid=false
checkout_head=false
print_version_and_exit=false

while getopts "$optspec" optchar; do
	case "${optchar}" in
		-)
		case "${OPTARG}" in
			help)
			usage
			;;
			head)
			val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
			new=$val
      checkout_head=true
			;;
			offset)
			val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
			offset=$val
			;;
			head=*)
			val=${OPTARG#*=}
			opt=${OPTARG%=$val}
			new=$val
      checkout_head=true
			;;
			offset=*)
			val=${OPTARG#*=}
			opt=${OPTARG%=$val}
			offset=$val
			;;
			skip)
			skip=true
			;;
			stupid)
			stupid=true
			;;
			version)
			print_version_and_exit=true
			;;
			*)
			if [ "$OPTERR" = 1 ]; then
				echo "$0: illegal option -- ${OPTARG}" >&2
				usage
			fi
			;;
		esac;;

		h)
		usage
		;;
		v)
		print_version_and_exit=true
		;;
		d)
		weeks=($OPTARG)
		search_method="weeks"
		;;
		n)
		number_of_commits=${OPTARG}
		search_method="commits"
		;;
		r)
		old=${OPTARG}
		search_method="raw"
		;;
		c)
		restore=true
		;;
		*)
		if [ "$OPTERR" == 1 ]; then
			usage
		fi
		;;
	esac
done

# change the output format for the built in bash command 'time'
TIMEFORMAT="done: real: %3lR user: %3lU sys: %3lS"

# Variable set up and config

git_root=$PWD
git_name=$(basename $PWD)

# Find out what config file to use. Start with the one in the git

if [ -e $git_root/.dmceconfig ]; then
  USE_DMCE_CONFIG_FILE=$git_root/.dmceconfig
elif [ -e $HOME/.dmceconfig ]; then
  USE_DMCE_CONFIG_FILE=$HOME/.dmceconfig
else
  echo "Could not find a valid dmce config file. Did you run install?"
  exit 1
fi

echo "$NAME: [args='$@']. Using config file: $USE_DMCE_CONFIG_FILE"
while read dmceconfig; do
  validconfig=$(echo $dmceconfig | egrep -v \#)
  if [ "$validconfig" != ""  ]; then
    conf_var=$(echo $validconfig | cut -d: -f1)
    conf_val=$(echo $validconfig | cut -d: -f2 | envsubst)
    eval $conf_var=\'$conf_val\'
    export $conf_var
  fi
done < $USE_DMCE_CONFIG_FILE

echo DMCE Version: $(git -C $DMCE_EXEC_PATH --no-pager log --pretty='%h' -1)
[ "$print_version_and_exit" = true ] && exit

set | grep ^DMCE_

time {
  echo "Restoring old probe state if needed"
  dmce_double=$(git ls-files -o --error-unmatch --exclude-standard '*.orginal' 2> /dev/null || :)
  [ "$dmce_double" != "" ] && for f in $dmce_double; do { mv $f ${f%%.orginal}; } & done
  wait
}

if [ "$restore" = true ]; then
  echo "Done"
  exit 0
fi

echo "Initialize log"
logfile=$(basename $0 .sh)-$(basename $git_root)-$(date '+%Y%m%d-%H%M%S').log
mkdir -p $DMCE_LOG_FILES
exec > >(tee -i $DMCE_LOG_FILES/$logfile)
exec 2>&1

if [ "$checkout_head" = true ]; then
  git checkout $new
  if [ "$?" != 0 ]; then
    echo ""
    echo "Git tree is dirty. Cannot checkout $new."
    echo "Please clean the $git_root before proceeding."
    echo ""
    exit 1
  fi
fi

if [ "$search_method" == "weeks" ]; then
  echo "Search by weeks ($weeks)"
  old=$(git log -n 1 --before=$weeks.weeks --pretty=%h | head -n 1)
elif [ "$search_method" == "commits" ]; then
  echo "Search by number of commits ($number_of_commits)"
  old=$(git log --oneline -$number_of_commits --pretty=%h | tail -1)
elif [ "$search_method" == "raw" ]; then
  echo "Search from $new to $old"
else
  usage
fi

if [ "$skip" = false ]; then
  echo "Set up DMCE include directory"

  # Clear old inc directory
  chmod -R +wx $DMCE_WORK_PATH/inc &> /dev/null
  rm -rf $DMCE_WORK_PATH/inc &> /dev/null
  mkdir -p $DMCE_WORK_PATH/inc/new
  mkdir -p $DMCE_WORK_PATH/inc/old

  # If stupid mode, create empty directory
  if [ "$stupid" = true ]; then
    echo "Stupid mode enabled, no include files used"
  else
    # Copy git and set rev to baseline TODO: Skip this step and copy from git directly
    rm -rf $DMCE_WORK_PATH/baseline/$git_name &>/dev/null
    mkdir -p $DMCE_WORK_PATH/baseline &>/dev/null
    cp -r $git_root $DMCE_WORK_PATH/baseline/$git_name &>/dev/null
    pushd $DMCE_WORK_PATH/baseline/$git_name &>/dev/null
    git clean -dfx &>/dev/null
    git reset --hard &>/dev/null
    git checkout $old &>/dev/null
    popd &>/dev/null

    # Copy includes for head
    find . -name "*.h" -exec cp -t $DMCE_WORK_PATH/inc/new/ {} + &>/dev/null || :

    # Copy includes for baseline
    pushd $DMCE_WORK_PATH/baseline/$git_name &>/dev/null
    find . -name "*.h" -exec cp -t $DMCE_WORK_PATH/inc/old/ {} + &>/dev/null || :
    popd &>/dev/null

    echo "Removing relative paths in include files"
    $DMCE_EXEC_PATH/dmce-remove-relpaths.sh $DMCE_WORK_PATH/inc/new
    $DMCE_EXEC_PATH/dmce-remove-relpaths.sh $DMCE_WORK_PATH/inc/old
  fi
  echo "Clean out probe database"
  rm -rf $DMCE_WORK_PATH/global_probedata.dmce
  touch $DMCE_WORK_PATH/global_probedata.dmce
fi

time {
  # Make offset visible for dmce.sh
  export offset

  echo "$NAME: $DMCE_EXEC_PATH/dmce.sh $git_root $new $old"
  if ! $DMCE_EXEC_PATH/dmce.sh $git_root $new $old; then
    echo "---"
    echo "error: dmce.sh failed - check logs"
    echo "---"
    exit 1
  fi
}
