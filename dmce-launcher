#!/usr/bin/env bash

# Copyright (c) 2016 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

NAME=$(basename "$0")
set -e
function _echo {
    if [ "${quiet}" = "true" ]; then
        return
    fi
    echo "$(date '+%Y-%m-%d %H:%M:%S'):$NAME:$*"
}

function usage() {
    cat << EOF
SYNOPSIS
    $NAME [options]

OPTIONS
    -c               Restore source code state
    -d val           Number of weeks from HEAD
    --head[=]<val>   <val> is the HEAD to which comparison is done
    -h, --help       This help
    -n val           Number of commits from HEAD
    --offset[=]<val> Assign probes starting from <val>
    --progress       Progress bar (implies -q)
    -q               Quiet mode
    -r val           SHA-1 delta HEAD..<val>
    --skip           Skip include file retrieval
    --stupid         DMCE include files awareness disabled
    -v, --version    Get DMCE version

DESCRIPTION
    $NAME is the main entry point for running DMCE from a git.

    To be executed from within the git repo root:

    $ cd /path/to/git/
    $ ../dmce/$NAME ...

    Details? Check out README.md!

EXAMPLES
    # Run DMCE on your latest changes
    $ ../dmce/$NAME

    # Run DMCE on the last 15 commits
    $ ../dmce/$NAME -n 15

    # Run DMCE on HEAD..SHA-1
    $ ../dmce/$NAME -r SHA-1

    # Run DMCE on $SHA1..SHA-2
    $ ../dmce/$NAME -r SHA-2 --head=SHA1

    # Run DMCE on last 10 weeks
    $ ../dmce/$NAME -d 10

    # Run DMCE on the last 100 commits. Start assigning probe numbers from 254.
    $ ../dmce/$NAME -n 100 --offset 254

    # Iterativly run DMCE on your latest changes
    $ ../dmce/$NAME
    $ make
    $ make test 2> outstderr.log
    $ ../dmce/dmce-summary outstderr.log
    $ ../dmce/$NAME -c

    # Run DMCE and use include files from previous run (faster)
    $ ../dmce/$NAME --skip

    # Handle include file retrieval externally
    $ ../dmce/$NAME --stupid

EOF
exit 1
}

if ! command -v clang-check > /dev/null; then
    echo "error: clang-check not found"
    exit 1
fi

if ! command -v python3 > /dev/null; then
    echo "error: python3 not found"
    exit 1
fi

if ! command -v git > /dev/null; then
    echo "error: git not found"
    exit 1
fi

optspec+="c"
optspec+="d:"
optspec+="h"
optspec+="n:"
optspec+="q"
optspec+="r:"
optspec+="v"
optspec+="-:"

search_method=commits
new="HEAD"
old=
offset=0
number_of_commits=1
skip=false
debug=false
stupid=false
checkout_head=false
print_version_and_exit=false
progress=false
quiet=false

while getopts "$optspec" optchar; do
    case "${optchar}" in
        -)
            case "${OPTARG}" in
                help)
                    usage
                    ;;
                head)
                    val="${!OPTIND}"; OPTIND=$(( OPTIND + 1 ))
                    new=$val
                    checkout_head=true
                    ;;
                offset)
                    val="${!OPTIND}"; OPTIND=$(( OPTIND + 1 ))
                    offset=$val
                    ;;
                head=*)
                    val=${OPTARG#*=}
                    new=$val
                    checkout_head=true
                    ;;
                offset=*)
                    val=${OPTARG#*=}
                    offset=$val
                    ;;
                progress)
                    progress=true
                    quiet=true
                    ;;
                skip)
                    skip=true
                    ;;
                debug)
                    debug=true
                    ;;
                stupid)
                    stupid=true
                    ;;
                version)
                    print_version_and_exit=true
                    ;;
                *)
                    if [ "$OPTERR" = 1 ]; then
                        _echo "illegal option -- ${OPTARG}" >&2
                        usage
                    fi
                    ;;
            esac;;

        h)
            usage
            ;;
        v)
            print_version_and_exit=true
            ;;
        d)
            weeks=("$OPTARG")
            search_method="weeks"
            ;;
        n)
            number_of_commits=${OPTARG}
            search_method="commits"
            ;;
        r)
            old=${OPTARG}
            search_method="raw"
            ;;
        q)
            quiet=true
            ;;
        c)
            restore=true
            ;;
        *)
            if [ "$OPTERR" == 1 ]; then
                usage
            fi
            ;;
    esac
done

if [ "${quiet}" = "false" ]; then
    while true; do
        clang-check --version | grep -o 'LLVM version.*'
        git --version
        python3 --version
        break
    done | sed 's,version,,g'
fi

export DMCE_QUIET_MODE="${quiet}"
export DMCE_PROGRESS="${progress}"
export DMCE_DEBUG="${debug}"

# change the output format for the built in bash command 'time'
TIMEFORMAT="done: real: %3lR user: %3lU sys: %3lS"

# Variable set up and config

git_root=$PWD
git_name=$(basename "$PWD")
export DMCE_GIT_NAME=$git_name

# Find out what config file to use. Start with the one in the git

if [ -e "${git_root}"/.dmceconfig ]; then
    USE_DMCE_CONFIG_FILE="${git_root}"/.dmceconfig
elif [ -e "$HOME"/.dmceconfig ]; then
    USE_DMCE_CONFIG_FILE=$HOME/.dmceconfig
else
    _echo "Could not find a valid dmce config file. Did you run install?"
    exit 1
fi
if [ "${quiet}" = "false" ]; then
    echo "---"
fi
_echo "config file: $USE_DMCE_CONFIG_FILE"
while read -r dmceconfig; do
    if [[ ${dmceconfig} == \#* ]] || [[ ${dmceconfig} == '' ]]; then
        continue
    fi
    conf_var=${dmceconfig%%:*}
    conf_val=${dmceconfig##*:}
    # escape double quotes
    conf_val=${conf_val//\"/\\\"}
    eval "$conf_var"=\""$conf_val"\"
    export "${conf_var:?}"
done < "$USE_DMCE_CONFIG_FILE"

mandatory_configs=
mandatory_configs+=("DMCE_EXEC_PATH")
mandatory_configs+=("DMCE_CONFIG_PATH")
mandatory_configs+=("DMCE_WORK_PATH")
mandatory_configs+=("DMCE_LOG_FILES")
mandatory_configs+=("DMCE_PROBE_SOURCE")

for c in ${mandatory_configs[@]}; do
    if [ "x${!c}" = "x" ]; then
        _echo "error: mandatory config '${c}' missing. Try to re-install!"
        exit 1
    fi
done

_echo "args: $* version: $(git -C "$DMCE_EXEC_PATH" --no-pager log --pretty='%h' -1)"
[ "$print_version_and_exit" = true ] && exit

dmce_double=$(find -name "*.dmceoriginal")
if [ "$dmce_double" != "" ]; then
    _echo "restoring old probe state"
    for f in $dmce_double; do
        mv "$f" "${f%%.dmceoriginal}" &
    done
    wait
fi

_echo "DMCE variables:"
if [ "${quiet}" = "false" ]; then
    set | grep ^DMCE_
fi

if [ "$restore" = true ]; then
    exit 0
fi

_echo "initialize log"
logfile="$(basename "$0" .sh)-$(basename "$git_root")-$(date '+%Y%m%d-%H%M%S').log"
mkdir -p "$DMCE_LOG_FILES"
exec > >(tee -i "$DMCE_LOG_FILES/$logfile")
exec 2>&1
_echo "$DMCE_LOG_FILES/$logfile"

if [ "$checkout_head" = true ]; then
    if ! git checkout "${new}"; then
        echo ""
        _echo "git tree is dirty. Cannot checkout $new."
        _echo "please clean the $git_root before proceeding."
        echo ""
        exit 1
    fi
fi

if [ "$search_method" == "weeks" ]; then
    _echo "search by weeks (${weeks[0]})"
    old=$(git log -n 1 --before="${weeks[0]}".weeks --pretty=%h | head -n 1)
elif [ "$search_method" == "commits" ]; then
    _echo "search by number of commits ($number_of_commits)"
    old=$(git log --oneline -"$number_of_commits" --pretty=%h | tail -1)
elif [ "$search_method" == "raw" ]; then
    _echo "search from $new to $old"
else
    usage
fi
if [ "$skip" = false ]; then
    _echo "set up DMCE include directory"

    # remove old inc directory
    rm -rf "${DMCE_WORK_PATH}"/$git_name/inc/{old,new} &> /dev/null

    # re-create inc directories
    mkdir -p "${DMCE_WORK_PATH}"/$git_name/inc/{old,new}

    # If stupid mode, create empty directory
    if [ "$stupid" = true ]; then
        _echo "stupid mode enabled, no include files used"
    else
        old_git_dir="$DMCE_WORK_PATH/baseline/$git_name"
        rm -rf ${old_git_dir}
        mkdir -p $DMCE_WORK_PATH/baseline
        _echo "set up old SHA-1: ${old_git_dir} from git: ${git_root}"
        cp -r ${git_root} ${old_git_dir} &>/dev/null

        git -C "${old_git_dir}" clean -dfx &>/dev/null
        git -C "${old_git_dir}" reset --hard &>/dev/null
        git -C "${old_git_dir}" checkout "${old}" &>/dev/null

        _echo "copy header files to $DMCE_WORK_PATH/$git_name/inc/new"
        find "${git_root}" -name "*.h" -exec cp -t "${DMCE_WORK_PATH}"/$git_name/inc/new/ {} + &>/dev/null || :
        _echo "found $(find "$DMCE_WORK_PATH"/$git_name/inc/new -type f | wc -l) file(s)"

        _echo "copy header files to $DMCE_WORK_PATH/$git_name/inc/old"
        find "${old_git_dir}" -name "*.h" -exec cp -t "${DMCE_WORK_PATH}"/$git_name/inc/old/ {} + &>/dev/null || :
        _echo "found $(find "$DMCE_WORK_PATH"/$git_name/inc/old -type f | wc -l) file(s)"

        _echo "removing relative paths in include files"
        "${DMCE_EXEC_PATH}"/dmce-remove-relpaths.sh "${DMCE_WORK_PATH}"/$git_name/inc/new
        "${DMCE_EXEC_PATH}"/dmce-remove-relpaths.sh "${DMCE_WORK_PATH}"/$git_name/inc/old
    fi
    _echo "clean out probe database"
    true > "${DMCE_WORK_PATH}"/global_probedata.dmce
fi

time {
_echo "$DMCE_EXEC_PATH/dmce.sh $git_root $new $old $old_git_dir"
if ! "$DMCE_EXEC_PATH"/dmce.sh "${git_root}" "${new}" "${old}" "${old_git_dir}" ${offset}; then
    _echo "error: dmce.sh failed - check logs"
    exit 1
fi
if [ "$DMCE_DEBUG" = false ]; then
    rm -rf "${DMCE_WORK_PATH}"/$git_name/{old,new,inc,workarea} &> /dev/null
else
    echo "Debug mode: Logs stored at ${DMCE_WORK_PATH}/$git_name"
fi
}
