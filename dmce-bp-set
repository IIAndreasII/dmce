#!/usr/bin/python3

# Copyright (c) 2022 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

import numpy as np
import sys
import argparse
import os
import re

descr = 'Set a \'breakpoint\' in a DMCE probed tree to be picked up by a trace probe'

parser = argparse.ArgumentParser(description=descr)
parser.add_argument('srcpath',            type=str,                 help='Path to source tree')
parser.add_argument('probefile',        type=str,                   help='Probe references file')
parser.add_argument('position',        type=str,                    help='path/file:line')
parser.add_argument('-v', '--verbose',  action='store_true',        help='verbose output')
args = parser.parse_args()

srcpath = args.srcpath
probefile = args.probefile
position = args.position
printverbose = args.verbose

if not os.path.exists(srcpath):
    print("Source tree path '" + srcpath + "' not found, abort")
    exit(1)

if not os.path.exists(probefile):
    print("Probe references file '" + probefile + "' not found, abort")
    exit(1)

if not ":" in position or not position.split(":")[1].isnumeric():
    print("position must be in the format path/file:line")
    exit(1)

bfile = position.split(":")[0]
bline = position.split(":")[1]

if not os.path.exists(srcpath + "/" + bfile):
    print("Source file '" + srcpath + "/" + bfile + "' not found, abort")
    exit(1)

with open(probefile, 'r') as pf:
    prefs = pf.readlines()
    pf.close()

with open(srcpath + "/" + bfile, 'r') as sf:
    src = sf.readlines()
    sf.close()

bline = int(bline) - 1

if bline < 0 or bline > len(src):
    print("Line number out of range: " + position)
    exit(1)

if not "DMCE_PROBE" in src[bline]:
    print(position + ":" + src[bline])
    print("No DMCE probe found at " + position + ", abort")
    exit(1)

print("Breakpint set at " + bfile + ":" + str(bline + 1))
print("     " + src[bline])
print("             |")
print("             V")

# no variables
src[bline] = re.sub(r'DMCE_PROBE(\d)\(\d*\)\,',r'DMCE_PROBE\1(0xbbbbbbbb),', src[bline])

# more than one variable
src[bline] = re.sub(r'DMCE_PROBE(\d)\((\d*)\,',r'DMCE_PROBE\1(0xbbbbbbbb,',src[bline])

print("     " + src[bline])

with open(srcpath + "/" + bfile, 'w') as tf:
    tf.writelines(src)


# end of file
