#!/usr/bin/env bash
# SPDX-License-Identifier: MIT

# Copyright (c) 2023 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

function _echo() {
	if [ "$EPOCHREALTIME" != "" ]; then
		echo "${EPOCHREALTIME}: $*"
	else
		echo "$(date '+%Y-%m-%d %H:%M:%S'): $*"
	fi
}

if [ ! -d .git ]; then
	echo "error: run from git root" 1>&2
	exit 1
fi

i=0
for f in $(git ls-files -- bin/); do
	if ! ff="$(command -v "${f##*/}")"; then
		continue
	elif ! cmp -s -- "${f}" "${ff}"; then
		i=$((i + 1))
	fi
done

if [ "$i" -ne 0 ]; then
	echo "warning: installed DMCE version does not match DMCE bin-files in git repo"
	sleep 3
fi

for c in shellcheck dmce alien; do
	if ! command -v "${c}" > /dev/null; then
		echo "error: command '${c}' not found" 1>&2
		exit 1
	fi
done

# git show --check
branch=$(git rev-parse --abbrev-ref HEAD)
ahead=$(git branch -v --format="%(upstream:track,nobracket)" --list "${branch:?}")
ahead=${ahead/ahead /}
if [ "${ahead}" != "" ]; then
	_echo "gitshowcheck: $(git log -"${ahead}" --oneline --format='%h'| xargs)"
	if ! git show --color=never --oneline --check -"$ahead"; then
		echo "error: command 'git show --check -$ahead' failed" 1>&2
		exit 1
	fi
fi

# for all bash shell scripts
mapfile -t sc_list < <(\
	git ls-files | \
	xargs file | \
	grep 'Bourne-Again shell script' | \
	cut -d: -f1)

for f in "${sc_list[@]}"; do
	_echo "spdxcheck: $f"
	if ! head -2 "${f}" | tail -1 | grep -q '^# SPDX-License-Identifier: MIT$'; then
		echo "error: '$f': 'SPDX-License-Identifier: MIT' string missing on line 2" 1>&2
		exit 1
	fi

	_echo "shebangcheck: $f"
	if ! head -1 "${f}" | grep -q '#!/usr/bin/env bash'; then
		echo "error: '$f': wrong shebang" 1>&2
		exit 1
	fi

	# ignore self
	if [ "$f" != "bin/pre-push" ]; then
		_echo "stderrcheck: $f"
		if grep 'echo "error:' "${f}" | grep -q -v '1>&2$'; then
			echo "error: '$f': redirect errors to stderr" 1>&2
			grep -H -n 'echo "error:' "${f}" | grep -v '1>&2$'
			exit 1
		elif grep 'echo "fatal:' "${f}" | grep -q -v '1>&2$'; then
			echo "error: '$f': redirect fatal errors to stderr" 1>&2
			grep -H -n 'echo "fatal:' "${f}" | grep -v '1>&2$'
			exit 1
		fi
	fi

	_echo "shellcheck: $f"
	if ! shellcheck "$f"; then
		exit 1
	fi
done

# build packages
packs=$(./build-pkg --help |& sed -e 's,usage: build-pkg \[,,g' -e 's,|, ,g' -e 's,]$,,g')
if [ "$packs" = "" ]; then
	echo "error: no packs" 1>&2
	exit 1
fi
for p in ${packs}; do
	_echo "build $p package"
	du -hs "$(./build-pkg "$p")"
done

# run tests
cd test
./run-all.sh
