#!/usr/bin/env bash

# Copyright (c) 2016 Ericsson AB
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

if [[ $* == *--help* ]] || [ $# -gt 1 ]; then
	echo "usage: dmce-setup [path|--help]"
	exit 1
elif ! c=$(command -v dmce-setup); then
	echo "error: command 'dmce-setup' not found - install DMCE!" 1>&2
	exit 1
fi

if [ $# -eq 1 ]; then
	cfg_dir="$1"
else
	cfg_dir="${HOME:?}"
fi

# sanity check
if [[ "${cfg_dir:?}" == -* ]]; then
	echo "error: path can not start with '-'"  1>&2
	exit 1
fi
install_dir="${c/\/bin\/dmce-setup}"

# remove old config
if [ -e "${cfg_dir:?}"/.dmceconfig ]; then
	rm -- "${cfg_dir:?}"/.dmceconfig
fi
if [ -e "${cfg_dir:?}"/.config/dmce ]; then
	rm -r -- "${cfg_dir:?}"/.config/dmce
fi

# re-create dirs
mkdir -p -- "${cfg_dir:?}"/.config/dmce
cfg_dir=$(readlink -f "${cfg_dir:?}")

_user=
if [ "x${USER}" != "x" ]; then
	_user="${USER}"
elif [ "x${LOGNAME}" != "x" ]; then
	_user="${LOGNAME}"
elif command -v whoami > /dev/null; then
	_user="$(whoami)"
else
	_user="dmce"
fi

wd="/tmp/${_user}/dmce"
if ! mkdir -p "${wd:?}" 2> /dev/null; then
	wd="$(mktemp -d --suffix -DMCE)"
fi

# create config file
cat > "${cfg_dir:?}"/.dmceconfig <<- NoWord
# Memory limit (in %) where dmce will halt until launching additional jobs
DMCE_MEMORY_LIMIT:50

# DMCE install path
DMCE_EXEC_PATH:${install_dir:?}/share/dmce

# Working directory root
DMCE_WORK_PATH:${wd:?}

# config files path. (dmce.exclude, dmce.include etc.)
DMCE_CONFIG_PATH:${cfg_dir:?}/.config/dmce

# Command line lookup hook (builds list of individual compile commands per file if not enough with the default ones)
DMCE_CMD_LOOKUP_HOOK:${cfg_dir:?}/.config/dmce/cmdlookuphook.sh

# Default compiler command line for c files
DMCE_DEFAULT_C_COMMAND_LINE:gcc -I/usr/include -I/usr/include/sys -isystem ${wd:?}/inc -I${wd:?}/inc

# Default compiler command line for cpp files
DMCE_DEFAULT_CPP_COMMAND_LINE:gcc -std=c++17 -I/usr/include -I/usr/include/sys -isystem ${wd:?}/inc -I${wd:?}inc

# Default compiler command line for h files
DMCE_DEFAULT_H_COMMAND_LINE:gcc -std=c++17 -I/usr/include -I/usr/include/sys -isystem ${wd:?}/inc -I${wd:?}/inc

# Number of data variables to probe
DMCE_NUM_DATA_VARS:0

# Allow trace probes to dereference pointers [YES|NO]
DMCE_ALLOW_DEREFERENCES:YES

# Probe definition c file
DMCE_PROBE_SOURCE:${install_dir:?}/share/dmce/dmce-probe-user.c

# Prolog definition c file
DMCE_PROBE_PROLOG:${install_dir:?}/share/dmce/dmce-prolog-default.c

# Post hook for running script after probing
DMCE_POST_HOOK:${install_dir:?}/share/dmce/dmce-post-hook-null

# Use system inlcude files (YES | NO)
DMCE_SYS_INCLUDES:NO

# Probe templates (YES | NO)
DMCE_PROBE_TEMPLATES:YES

# Fix return of nullpointer instead of 0 for C++ when appropriate (YES | NO)
DMCE_FIX_NULLPTR:NO

# Pick up toplevel variables (YES | NO)
DMCE_TOP_LEVEL_VARS:NO

# git diff algorithm
DMCE_GIT_DIFF_ALGORITHM:histogram

# Trace probes can use this define for buffer sizes
DMCE_PROBE_DEFINE:DMCE_PROBE_NBR_TRACE_ENTRIES (1024 * 64)

# Trace probes can use this define for trace entry number of optional elements
DMCE_PROBE_DEFINE:DMCE_PROBE_NBR_OPTIONAL_ELEMENTS 10

# Some probes need a path for output files
DMCE_PROBE_DEFINE:DMCE_PROBE_OUTPUT_PATH "${wd:?}"

# Some probes need system wide lock dirs for entry and exit
DMCE_PROBE_DEFINE:DMCE_PROBE_LOCK_DIR_ENTRY "${wd:?}/dmce-trace-buffer-lock-entry"
DMCE_PROBE_DEFINE:DMCE_PROBE_LOCK_DIR_EXIT "${wd:?}/dmce-trace-buffer-lock-exit"

# Some probes need a default setting for trace enabled at program entry
DMCE_PROBE_DEFINE:DMCE_PROBE_TRACE_ENABLED (1)

# Some probes check if they should handle signals
DMCE_PROBE_DEFINE:DMCE_PROBE_HANDLE_SIGNALS (1)

# Some utilties need an editor
DMCE_EDITOR:vim

# DMCE cache
DMCE_CACHE:0
NoWord

cp -a \
	"${install_dir:?}"/share/dmce/constructs.exclude \
	"${install_dir:?}"/share/dmce/dmce.exclude \
	"${install_dir:?}"/share/dmce/dmce.include \
	"${install_dir:?}"/share/dmce/dmce.pos.exclude \
	"${install_dir:?}"/share/dmce/dmce.pos.include \
	"${install_dir:?}"/share/dmce/dmce.var.exclude \
	"${install_dir:?}"/share/dmce/dmce.var.include \
	"${install_dir:?}"/share/dmce/recognizedexpressions.py \
	"${install_dir:?}"/share/dmce/cmdlookuphook.sh \
	"${cfg_dir:?}"/.config/dmce/

# bash completion
mkdir \
	-p \
	"${HOME:?}"/.local/share/bash-completion/completions
cp \
	-a \
	"${install_dir:?}"/share/dmce/dmce-completion.bash \
	"${HOME:?}"/.local/share/bash-completion/completions/dmce

# end with a list of created files
find \
	"${cfg_dir:?}"/.dmceconfig \
	"${cfg_dir:?}"/.config/dmce \
	"${HOME:?}"/.local/share/bash-completion/completions/dmce \
	-type f
